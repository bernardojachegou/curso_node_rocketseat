Curso NodeJS (Rocketseat)
Preparando projeto com Node.js (Básico)
----------------------------------------------------------------------------------------------------------------
NO TERMINAL (VSCode):
npm init -y
npm install express
----------------------------------------------------------------------------------------------------------------
1. Criar ARQUIVO server.js:
1.1 Importar o express
1.2 Definir variável app = express();
1.3 Usar método app.get("/", (req, res) => {res.send("Hello")}); app.listen (3001);
1.4 Rodar um node server.js (terminal)
----------------------------------------------------------------------------------------------------------------
1. instalação do NODEMON:
1.1 npm install -D nodemon
1.2 Criar script "dev": nodemon nomeArquivo.js
1.3 npm run dev
----------------------------------------------------------------------------------------------------------------
1. Instalação do MONGODB e DOCKER:
1.1 download do Docker Desktop
1.2 verificar a instalação cmd - docker (versão)
1.3 docker pull mongo (download do mongodb)
1.4 docker run --name mongodb -p 27017:27017 -d mongo
1.5 docker ps a- (verificar)
----------------------------------------------------------------------------------------------------------------
1. Conectando API ao BANCO DE DADOS:
1.1 TERMINAL: npm install mongoose
1.2 fazer import no server.js (const mongoose = require('mongoose');
----------------------------------------------------------------------------------------------------------------
1. Criação do (Product.js) MODEL - MVC:
1.1 Criar o arquivo Product.js
1.2 import mongoose
1.3 Cria objetos com dados dos products (title, description, url, CreatedAt)
método >>>>mongoose.model('Product', SchemaProduct)<<<<
1.4 Fazer require no server.js
1.5 Instalar biblioteca pra criar models (npm install riquireDir)
1.6 Simular a criação de um produto (Product.create)
----------------------------------------------------------------------------------------------------------------
1. Separação de ARQUIVOS:
1.1 Criar arquivo routes.js (para as rotas)
1.2 Criar arquivo ProductController.js (para a lógica dos produtos)
1.3 Configurar ambos os arquivos (routes/ProductController)
----------------------------------------------------------------------------------------------------------------
1. Utilização do Insomnia e CRUD (CreateReadUpdateDelete):
1.1 Rota de criação de registros (productcontroller+routers)
1.2 Criação das rotas necessárias (CRUD) (show-store-update-delete)
----------------------------------------------------------------------------------------------------------------
1. Criação de PAGINAÇÃO:
1.1 Paginação na listagem de produtos backend (10 itens por página)
1.2 npm install mongoose-paginate
1.3 modificações no product controller
----------------------------------------------------------------------------------------------------------------
1. Utlização do CORS (acesso a API) - Prevenção de acesso:
1.1 npm install cors 
1.2 import de cors dentro do server.js
----------------------------------------------------------------------------------------------------------------