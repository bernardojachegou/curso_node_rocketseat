Curso NodeJS (Rocketseat)
Preparando projeto com Node.js (Básico)
--------------------------------------------------------
NO TERMINAL (VSCode):
npm init -y
npm install express
--------------------------------------------------------
CRIAR ARQUIVO server.js:
1. Importar o express
1.1 Definir variável app = express();
1.2 Usar método app.get("/", (req, res) => {res.send("Hello")}); app.listen (3001);
1.3 Rodar um node server.js (terminal)
--------------------------------------------------------
INSTALAÇÃO do nodemon:
1. npm install -D nodemon
1.1 Criar script "dev": nodemon nomeArquivo.js
1.2 npm run dev
--------------------------------------------------------
INSTALAÇÃO do Mongodb e Docker:
1. download do Docker Desktop
1.1 verificar a instalação cmd - docker (versão)
1.2 docker pull mongo (download do mongodb)
1.3 docker run --name mongodb -p 27017:27017 -d mongo
1.4 docker ps a- (verificar)
--------------------------------------------------------
CONECTANDO API AO BANCO DE DADOS:
1. terminal: npm install mongoose
fazer import no server.js (const mongoose = require('mongoose');
--------------------------------------------------------
CRIAÇÃO DO (Product.js) MODEL - MVC:
1. Criar o arquivo Product.js
1.1 import mongoose
1.2 Cria objetos com dados dos products (title, description, url, CreatedAt)
método >>>>mongoose.model('Product', SchemaProduct)<<<<
1.3 Fazer require no server.js
1.4 Instalar biblioteca pra criar models (npm install riquireDir)
1.5 Simular a criação de um produto (Product.create)
--------------------------------------------------------
SEPARAÇÃO DE ARQUIVOS:
1. Criar arquivo routes.js (para as rotas)
1.1 Criar arquivo ProductController.js (para a lógica dos produtos)
1.2 Configurar ambos os arquivos (routes/ProductController)
--------------------------------------------------------
UTILIZAÇÃO DO Insomnia e CRUD (CreateReadUpdateDelete):
1. Rota de criação de registros (productcontroller+routers)
1.1 Criação das rotas necessárias (CRUD) (show-store-update-delete)
--------------------------------------------------------
CRIAÇÃO DE PÁGINAÇÃO NO BACKEND
2. Paginação na listagem de produtos backend (10 itens por página)
2.1 npm install mongoose-paginate
modificações no product controller
--------------------------------------------------------
UTILIZAÇÃO DO CORS (acesso a API) - Prevenção de acesso
npm install cors 
import de cors dentro do server.js
--------------------------------------------------------
